{"version":3,"sources":["components/PersonLink/PersonLink.tsx","components/Loader/Loader.tsx","api.ts","components/PeopleTable/PeopleTable.tsx","App.tsx","index.tsx"],"names":["PersonLink","person","handlePersonClick","name","sex","slug","className","cn","to","onClick","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeopleTable","useState","people","setPeople","error","setError","isLoading","setIsLoading","match","useMatch","params","selectedSlug","setSelectedSlug","peopleFromServer","updatedPeople","map","mother","find","human","motherName","father","fatherName","length","useEffect","showPeople","born","died","App","role","isActive","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d3a619a5.chunk.js","sourcesContent":["import { FC } from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface Props {\n  person: Person;\n  handlePersonClick: (slug: string) => void;\n}\n\nexport const PersonLink: FC<Props> = ({\n  person,\n  handlePersonClick,\n}) => {\n  const {\n    name,\n    sex,\n    slug,\n  } = person;\n\n  return (\n    <Link\n      className={\n        cn({ 'has-text-danger': sex === 'f' })\n      }\n      to={`/people/${slug}`}\n      onClick={() => handlePersonClick(slug)}\n    >\n      {name}\n    </Link>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import {\n  FC, useEffect, useState,\n} from 'react';\n\nimport { useMatch } from 'react-router-dom';\n\nimport cn from 'classnames';\n\nimport { Person } from '../../types';\n\nimport { PersonLink } from '../PersonLink';\n\nimport { Loader } from '../Loader';\n\nimport { getPeople } from '../../api';\n\nexport const PeopleTable: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const [error, setError] = useState('');\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const match = useMatch('/people/:selectedSlug');\n\n  const [selectedSlug, setSelectedSlug] = useState(match?.params.selectedSlug);\n\n  const handlePersonClick = (slug: string) => {\n    setSelectedSlug(slug);\n  };\n\n  useEffect(() => {\n    setSelectedSlug(match?.params.selectedSlug || '');\n  }, [match]);\n\n  async function showPeople() {\n    try {\n      setIsLoading(true);\n      const peopleFromServer = await getPeople();\n\n      const updatedPeople = peopleFromServer.map(person => {\n        const mother = peopleFromServer.find((human) => (\n          person.motherName === human.name\n        ));\n\n        const father = peopleFromServer.find((human) => (\n          person.fatherName === human.name\n        ));\n\n        return {\n          ...person,\n          father,\n          mother,\n        };\n      });\n\n      if (updatedPeople.length === 0) {\n        setError('no people');\n      }\n\n      setPeople(updatedPeople);\n      setIsLoading(false);\n    } catch {\n      setError('something wrong');\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    showPeople();\n  }, []);\n\n  return (\n    <>\n      {\n        isLoading\n          ? <Loader />\n          : (\n            <>\n              {\n                error\n                  ? (\n                    <p\n                      data-cy={\n                        error === 'something wrong'\n                          ? 'peopleLoadingError'\n                          : 'noPeopleMessage'\n                      }\n                      className=\"has-text-danger\"\n                    >\n                      {error}\n                    </p>\n                  )\n                  : (\n                    <table\n                      data-cy=\"peopleTable\"\n                      className={cn(\n                        'table',\n                        'is-striped',\n                        'is-hoverable',\n                        'is-fullwidth',\n                        'is-narrow',\n                      )}\n                    >\n                      <>\n                        <thead>\n                          <tr>\n                            <th>Name</th>\n                            <th>Sex</th>\n                            <th>Born</th>\n                            <th>Died</th>\n                            <th>Mother</th>\n                            <th>Father</th>\n                          </tr>\n                        </thead>\n\n                        <tbody>\n                          {\n                            people.map(person => {\n                              const {\n                                name,\n                                sex,\n                                born,\n                                died,\n                                fatherName,\n                                motherName,\n                                mother,\n                                father,\n                                slug,\n                              } = person;\n\n                              return (\n                                <tr\n                                  data-cy=\"person\"\n                                  key={name}\n                                  className={\n                                    cn({\n                                      'has-background-warning':\n                                      slug === selectedSlug,\n                                    })\n                                  }\n                                >\n                                  <td>\n                                    <PersonLink\n                                      person={person}\n                                      handlePersonClick={handlePersonClick}\n                                    />\n                                  </td>\n                                  <td>{sex}</td>\n                                  <td>{born}</td>\n                                  <td>{died}</td>\n                                  <td>\n                                    {\n                                      !mother\n                                        ? motherName\n                                        : (\n                                          <PersonLink\n                                            person={mother}\n                                            handlePersonClick={\n                                              handlePersonClick\n                                            }\n                                          />\n                                        )\n                                    }\n                                    {\n                                      !motherName && (\n                                        '-'\n                                      )\n\n                                    }\n                                  </td>\n                                  <td>\n                                    {\n                                      !father\n                                        ? fatherName\n                                        : (\n                                          <PersonLink\n                                            person={father}\n                                            handlePersonClick={\n                                              handlePersonClick\n                                            }\n                                          />\n                                        )\n                                    }\n                                    {\n                                      !fatherName && (\n                                        '-'\n                                      )\n\n                                    }\n                                  </td>\n                                </tr>\n                              );\n                            })\n                          }\n                        </tbody>\n                      </>\n                    </table>\n                  )\n              }\n            </>\n          )\n      }\n    </>\n  );\n};\n","import {\n  FC,\n} from 'react';\n\nimport {\n  NavLink,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\n\nimport cn from 'classnames';\n\nimport './App.scss';\n\nimport { PeopleTable } from './components/PeopleTable';\n\nexport const App: FC = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => (\n              cn(\n                'navbar-item',\n                {\n                  'has-background-grey-lighter': isActive,\n                },\n              )\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => (\n              cn(\n                'navbar-item',\n                {\n                  'has-background-grey-lighter': isActive,\n                },\n              )\n            )}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <h1 className=\"title\">Home Page</h1>\n            }\n          />\n\n          <Route\n            path=\"/home\"\n            element={\n              <Navigate to=\"/\" replace />\n            }\n          />\n\n          <Route\n            path=\"/people\"\n            element={(\n              <>\n                <h1 className=\"title\">People Page</h1>\n                <div className=\"block\">\n                  <div className=\"box table-container\">\n                    <PeopleTable />\n                  </div>\n                </div>\n              </>\n            )}\n          />\n\n          <Route\n            path=\"/people/:selectedSlug\"\n            element={(\n              <>\n                <h1 className=\"title\">People Page</h1>\n                <div className=\"block\">\n                  <div className=\"box table-container\">\n                    <PeopleTable />\n                  </div>\n                </div>\n              </>\n            )}\n          />\n\n          <Route\n            path=\"*\"\n            element={\n              <h1 className=\"title\">Page not found</h1>\n            }\n          />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}